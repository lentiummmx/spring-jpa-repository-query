package org.hibernate.cfg;

import org.hibernate.jpa.QueryHints;
import org.hibernate.cfg.annotations.QueryHintDefinition;

import javax.annotation.Nonnull;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.QueryHint;
import java.util.Arrays;
import java.util.Collections;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class QueryHintBinder {

    public static <E> Set<String> getQueryHints(
            @Nonnull Class<E> entityClass,
            @Nonnull String queryName) {
        Stream<String> customQueryHints = Stream.empty();
        NamedQuery[] namedQueries = entityClass.getAnnotation(NamedQueries.class).value();
        Optional<NamedQuery> optNamedQuery = Arrays.stream(namedQueries)
                .filter(namedQuery -> namedQuery.name().equals(queryName))
                .findFirst();
        optNamedQuery.ifPresent(namedQuery -> customQueryHints = Stream.concat(customQueryHints, extractCustomQueryHints(queryName, namedQuery.hints())));

        NamedNativeQuery[] namedNativeQueries = entityClass.getAnnotation(NamedNativeQueries.class).value();
        Optional<NamedNativeQuery> optNamedNativeQuery = Arrays.stream(namedNativeQueries)
                .filter(namedNativeQuery -> namedNativeQuery.name().equals(queryName))
                .findFirst();
        optNamedNativeQuery.ifPresent(namedNativeQuery -> customQueryHints = extractCustomQueryHints(queryName, namedNativeQuery.hints()));

        return customQueryHints.filter(Objects::nonNull).collect(Collectors.toUnmodifiableSet());
    }

    private static Stream<String> extractCustomQueryHints(@Nonnull String queryName, QueryHint[] queryHints) {
        QueryHintDefinition hints = new QueryHintDefinition(queryHints);
        //QueryHints.getDefinedHints().forEach(hintName -> hints.getString(queryName, hintName));
        //Stream<String> customQueryHints = QueryHints.getDefinedHints().stream().map(hintName -> hints.getString(queryName, hintName));
        //return customQueryHints;
        return QueryHints.getDefinedHints().stream().map(hintName -> hints.getString(queryName, hintName));

    }
}
